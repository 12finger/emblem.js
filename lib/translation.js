// Generated by CoffeeScript 1.4.0
var ContentStack, Emblem, Handlebars, processNodes,
  __hasProp = {}.hasOwnProperty;

Handlebars = require('handlebars');

Emblem = require('./emblem');

ContentStack = (function() {

  function ContentStack() {
    this.current = "";
  }

  ContentStack.prototype.append = function(s) {
    return this.current += s;
  };

  ContentStack.prototype.flatten = function() {
    var ret;
    ret = this.current;
    this.current = "";
    return ret;
  };

  return ContentStack;

})();

processNodes = function(nodes, stack, statements) {
  var attributesString, c, classNames, classes, closeId, firstChar, hash, helper, k, name, node, openStache, pairs, substatements, tagName, v, value, _i, _len, _ref, _ref1;
  if (statements == null) {
    statements = [];
  }
  for (_i = 0, _len = nodes.length; _i < _len; _i++) {
    node = nodes[_i];
    if (node.type === 'html') {
      tagName = node.tagName || 'div';
      classes = node.attrs.classes || [];
      classNames = classes.join(' ');
      attributesString = "";
      _ref = node.attrs || {};
      for (name in _ref) {
        if (!__hasProp.call(_ref, name)) continue;
        value = _ref[name];
        attributesString += ' ' + name + '"' + value + '"';
      }
      stack.append("<" + tagName + attributesString + ">");
      processNodes(node.nodes || [], stack, statements);
      stack.append("</" + tagName + ">");
    } else if (node.type === 'mustache') {
      c = stack.flatten();
      if (c) {
        statements.push(new Handlebars.AST.ContentNode(c));
      }
      firstChar = node.params[0].charAt(0);
      if (firstChar === firstChar.toUpperCase()) {
        helper = "view";
        node.params.unshift(helper);
      }
      pairs = [];
      _ref1 = node.hash;
      for (k in _ref1) {
        if (!__hasProp.call(_ref1, k)) continue;
        v = _ref1[k];
        pairs.push([k, v]);
      }
      hash = new Handlebars.AST.HashNode(pairs);
      if (node.nodes.length) {
        closeId = new Handlebars.AST.IdNode(node.params[0].split('.'));
        substatements = processNodes(node.nodes, new ContentStack);
        statements.push(new Handlebars.AST.ProgramNode(substatements, []));
        openStache = new Handlebars.AST.MustacheNode(node.params, hash, node.escaped);
        statements.push(new Handlebars.AST.BlockNode(openStache, statements, [], closeId));
      } else {
        statements.push(new Handlebars.AST.MustacheNode(node.params, hash, node.escaped));
      }
    } else if (node instanceof Array) {
      processNodes(node, stack, statements);
    } else {
      stack.append(node.toString());
    }
  }
  return statements;
};

Emblem.parse = function(string) {
  var c, emblemAST, processed, stack, statements;
  stack = new ContentStack;
  processed = Emblem.Preprocessor.processSync(string);
  emblemAST = Emblem.Parser.parse(processed);
  statements = processNodes(emblemAST, stack);
  c = stack.flatten();
  if (c) {
    statements.push(new Handlebars.AST.ContentNode(c));
  }
  return new Handlebars.AST.ProgramNode(statements, []);
};
